// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SJOB_EXE201.Models;

#nullable disable

namespace SJOB_EXE201.Migrations
{
    [DbContext(typeof(SjobContext))]
    [Migration("20250512075209_Notification")]
    partial class Notification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SJOB_EXE201.Models.AdditionalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("DiamondPostsIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("diamond_posts_included");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int")
                        .HasColumnName("duration_days");

                    b.Property<int?>("GoldPostsIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("gold_posts_included");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("service_type");

                    b.Property<int?>("SilverPostsIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("silver_posts_included");

                    b.HasKey("Id")
                        .HasName("PK__addition__3213E83FAF0C9D62");

                    b.ToTable("additional_services", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EmployerRating")
                        .HasColumnType("int")
                        .HasColumnName("employer_rating");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("WorkerRating")
                        .HasColumnType("int")
                        .HasColumnName("worker_rating");

                    b.HasKey("Id")
                        .HasName("PK__applicat__3213E83F17E69A8C");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Status" }, "idx_applications_status");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.ApplicationNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("application_notes", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BidAmount")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("bid_amount");

                    b.Property<int?>("ClickCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("click_count");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<int?>("ImpressionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("impression_count");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("position");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("redirect_url");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__banners__3213E83FF8839A19");

                    b.HasIndex("UserId");

                    b.ToTable("banners", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_description");

                    b.Property<string>("CompanyLogo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_logo");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanySize")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_size");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_website");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FreePostsRemaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("free_posts_remaining");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("industry");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool?>("VerifiedBadge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("verified_badge");

                    b.HasKey("Id")
                        .HasName("PK__company___3213E83F0FD57A10");

                    b.HasIndex(new[] { "UserId" }, "idx_company_profiles_user_id");

                    b.ToTable("company_profiles", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.CreditTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("balance_after");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("reference_type");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("transaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__credit_t__3213E83F89D5B902");

                    b.HasIndex("UserId");

                    b.ToTable("credit_transactions", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("PK__job_cate__3213E83FCA9C1F34");

                    b.HasIndex("ParentId");

                    b.ToTable("job_categories", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("benefits");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ExperienceLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("experience_level");

                    b.Property<string>("Image2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image2");

                    b.Property<string>("Image3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image3");

                    b.Property<string>("Image4")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image4");

                    b.Property<string>("ImageMain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_main");

                    b.Property<bool?>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<string>("JobType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("job_type");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("PostType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("silver")
                        .HasColumnName("post_type");

                    b.Property<int?>("PriorityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("priority_level");

                    b.Property<DateTime?>("PushedToTopUntil")
                        .HasColumnType("datetime")
                        .HasColumnName("pushed_to_top_until");

                    b.Property<string>("Requirements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("requirements");

                    b.Property<decimal?>("SalaryMax")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("salary_max");

                    b.Property<decimal?>("SalaryMin")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("salary_min");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("draft")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.HasKey("Id")
                        .HasName("PK__job_post__3213E83F53C3A6C9");

                    b.HasIndex(new[] { "PostType" }, "idx_job_posts_post_type");

                    b.HasIndex(new[] { "PriorityLevel" }, "idx_job_posts_priority_level");

                    b.HasIndex(new[] { "PushedToTopUntil" }, "idx_job_posts_pushed_to_top_until");

                    b.HasIndex(new[] { "Status" }, "idx_job_posts_status");

                    b.HasIndex(new[] { "UserId" }, "idx_job_posts_user_id");

                    b.ToTable("job_posts", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobPostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.HasKey("Id")
                        .HasName("PK__job_post__3213E83F339E1BA6");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobPostId");

                    b.ToTable("job_post_categories", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.MarketingCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("EmailTemplate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_template");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("SentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sent_count");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("draft")
                        .HasColumnName("status");

                    b.Property<int?>("TargetCount")
                        .HasColumnType("int")
                        .HasColumnName("target_count");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__marketin__3213E83F3184CE76");

                    b.HasIndex("UserId");

                    b.ToTable("marketing_campaigns", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("reference_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("vnpay")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("payment_status");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("payment_type");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("VnpayTransactionInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vnpay_transaction_info");

                    b.HasKey("Id")
                        .HasName("PK__payments__3213E83F928D54E8");

                    b.HasIndex("UserId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83F596F8211");

                    b.HasIndex(new[] { "Name" }, "UQ__roles__72E12F1B404E6A29")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DiamondPostsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("diamond_posts_applied");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int?>("GoldPostsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("gold_posts_applied");

                    b.Property<bool?>("PostCreditsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("post_credits_applied");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<int?>("SilverPostsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("silver_posts_applied");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__service___3213E83FA9296A27");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Status" }, "idx_service_orders_status");

                    b.ToTable("service_orders", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.ServiceUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("reference_type");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("service_type");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__service___3213E83F58B18C5F");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("service_usages", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DiamondPostsRemaining")
                        .HasColumnType("int")
                        .HasColumnName("diamond_posts_remaining");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int>("GoldPostsRemaining")
                        .HasColumnType("int")
                        .HasColumnName("gold_posts_remaining");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<int>("PushTopRemaining")
                        .HasColumnType("int")
                        .HasColumnName("push_top_remaining");

                    b.Property<int>("SilverPostsRemaining")
                        .HasColumnType("int")
                        .HasColumnName("silver_posts_remaining");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__subscrip__3213E83FD26BB75F");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Status" }, "idx_subscriptions_status");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DiamondPosts")
                        .HasColumnType("int")
                        .HasColumnName("diamond_posts");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int")
                        .HasColumnName("duration_days");

                    b.Property<int>("GoldPosts")
                        .HasColumnType("int")
                        .HasColumnName("gold_posts");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("MarketingPackage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("marketing_package");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("PriorityLevel")
                        .HasColumnType("int")
                        .HasColumnName("priority_level");

                    b.Property<int>("PushTopTimes")
                        .HasColumnType("int")
                        .HasColumnName("push_top_times");

                    b.Property<int>("SilverPosts")
                        .HasColumnType("int")
                        .HasColumnName("silver_posts");

                    b.HasKey("Id")
                        .HasName("PK__subscrip__3213E83FB090E19F");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthProvider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("local")
                        .HasColumnName("auth_provider");

                    b.Property<string>("AuthProviderId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("auth_provider_id");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F2E2ADCD6");

                    b.HasIndex(new[] { "RoleId" }, "idx_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.UserCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(15, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("balance");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__user_cre__3213E83F00516FA5");

                    b.HasIndex("UserId");

                    b.ToTable("user_credits", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("availability");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DesiredLocation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("desired_location");

                    b.Property<string>("DesiredPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("desired_position");

                    b.Property<decimal?>("DesiredSalary")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("desired_salary");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("education");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("experience_years");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("firstName");

                    b.Property<string>("Headline")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("headline");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("skills");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__user_det__3213E83F18C0F97A");

                    b.HasIndex(new[] { "UserId" }, "idx_user_details_user_id");

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.UserPostCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiamondPostsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("diamond_posts_available");

                    b.Property<int>("GoldPostsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("gold_posts_available");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SilverPostsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("silver_posts_available");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_post_credits", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.Property<int?>("JobPostId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__wishlist__3213E83F");

                    b.HasIndex("JobPostId");

                    b.HasIndex("JobPostId1");

                    b.HasIndex("UserId", "JobPostId")
                        .IsUnique()
                        .HasDatabaseName("UQ__wishlists__user_job");

                    b.ToTable("wishlists", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.WorkerVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsFirstView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_first_view");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("VisitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("visit_time")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__worker_v__3213E83FEF2C8194");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("worker_visits", (string)null);
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Application", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.JobPost", "JobPost")
                        .WithMany("Applications")
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("FK_applications_job_posts");

                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_applications_users");

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.ApplicationNote", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Banner", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("Banners")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_banners_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.CompanyProfile", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("CompanyProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_company_profiles_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.CreditTransaction", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_credit_transactions_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobCategory", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.JobCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_job_categories_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobPost", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_job_posts_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobPostCategory", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.JobCategory", "Category")
                        .WithMany("JobPostCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_job_post_categories_categories");

                    b.HasOne("SJOB_EXE201.Models.JobPost", "JobPost")
                        .WithMany("JobPostCategories")
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("FK_job_post_categories_job_posts");

                    b.Navigation("Category");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.MarketingCampaign", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("MarketingCampaigns")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_marketing_campaigns_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Notification", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Payment", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_payments_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.ServiceOrder", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.AdditionalService", "Service")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_service_orders_services");

                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_service_orders_users");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.ServiceUsage", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.JobPost", "JobPost")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("FK_service_usages_job_posts");

                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_service_usages_users");

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Subscription", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_subscriptions_plans");

                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_subscriptions_users");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.User", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_users_roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.UserCredit", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("UserCredits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_credits_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.UserDetail", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_details_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.UserPostCredit", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithOne("UserPostCredit")
                        .HasForeignKey("SJOB_EXE201.Models.UserPostCredit", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_post_credits_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Wishlist", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.JobPost", "JobPost")
                        .WithMany()
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("FK_wishlists_job_posts");

                    b.HasOne("SJOB_EXE201.Models.JobPost", null)
                        .WithMany("Wishlists")
                        .HasForeignKey("JobPostId1");

                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_wishlists_users");

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.WorkerVisit", b =>
                {
                    b.HasOne("SJOB_EXE201.Models.JobPost", "JobPost")
                        .WithMany("WorkerVisits")
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("FK_worker_visits_job_posts");

                    b.HasOne("SJOB_EXE201.Models.User", "User")
                        .WithMany("WorkerVisits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_worker_visits_users");

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.AdditionalService", b =>
                {
                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("JobPostCategories");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.JobPost", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobPostCategories");

                    b.Navigation("ServiceUsages");

                    b.Navigation("Wishlists");

                    b.Navigation("WorkerVisits");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SJOB_EXE201.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Banners");

                    b.Navigation("CompanyProfiles");

                    b.Navigation("CreditTransactions");

                    b.Navigation("JobPosts");

                    b.Navigation("MarketingCampaigns");

                    b.Navigation("Payments");

                    b.Navigation("ServiceOrders");

                    b.Navigation("ServiceUsages");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserCredits");

                    b.Navigation("UserDetails");

                    b.Navigation("UserPostCredit");

                    b.Navigation("WorkerVisits");
                });
#pragma warning restore 612, 618
        }
    }
}
